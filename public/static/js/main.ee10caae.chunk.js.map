{"version":3,"sources":["spacex.png","components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","LaunchItem","_ref","_ref$launch","launch","flight_number","mission_name","launch_date_local","launch_success","react_default","a","createElement","className","classNames","text-success","text-danger","react_router_dom","to","concat","MissionKey","style","textAlign","LAUNCHES_QUERY","gql","_templateObject","renderLaunches","loading","error","data","console","color","react","launches","map","key","Launches","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","value","react_apollo_esm","query","Component","LAUNCH_QUERY","Launch_templateObject","renderLaunch","_data$launch","launch_year","_data$launch$rocket","rocket","rocket_id","rocket_name","rocket_type","Launch","props","match","params","parseInt","variables","client","ApolloClient","uri","App","src","logo","alt","width","margin","react_router","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ee10caae.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spacex.e6636a81.png\";","import React from 'react';\nimport classNames from 'classnames';\nimport { Link } from 'react-router-dom';\n\nexport default function LaunchItem({\n    launch: { flight_number, mission_name, launch_date_local, launch_success }\n}) {\n    return (\n        <div className=\"card card-body mb-3\">\n            <div className=\"row\">\n                <div className=\"col-md-9 text-left\">\n                    <h4>Mission: <span className={classNames({\n                        'text-success': launch_success,\n                        'text-danger': !launch_success\n                    })}>{ mission_name }</span></h4>\n                    <p>Date: { launch_date_local }</p>\n                </div>\n                <div className=\"col-md-3\">\n                    <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">Launch Details</Link>\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React from 'react'\n\nexport default function MissionKey() {\n  return (\n    <div style={{ textAlign: \"left\" }} className=\"my-3\">\n      <p>\n        <span className=\"px-3 mr-2 bg-success\" /> = Success\n      </p>\n      <p>\n        <span className=\"px-3 mr-2 bg-danger\" /> = Fail\n      </p>\n    </div>\n  )\n}\n","import React, { Component, Fragment } from \"react\";\nimport gql from \"graphql-tag\";\nimport { Query } from \"react-apollo\";\nimport LaunchItem from \"./LaunchItem\";\nimport MissionKey from './MissionKey';\n\nconst LAUNCHES_QUERY = gql`\n  query LaunchesQuery {\n    launches {\n      flight_number\n      mission_name\n      launch_date_local\n      launch_success\n    }\n  }\n`;\n\nconst renderLaunches = ({ loading, error, data }) => {\n  if (loading) {\n    return <h4>Loading...</h4>;\n  } else if (error) {\n    console.error(error);\n    return <h4 style={{ color: \"red\" }}>An error occurred.</h4>;\n  } else {\n    return (\n      <Fragment>\n        {data.launches.map(launch => (\n          <LaunchItem key={launch.flight_number} launch={launch} />\n        ))}\n      </Fragment>\n    );\n  }\n};\n\nexport class Launches extends Component {\n  render() {\n    return (\n      <Fragment>\n        <h1 className=\"display-4 my-3\">Launches</h1>\n        <MissionKey />\n        <Query query={LAUNCHES_QUERY}>\n          {renderLaunches}\n        </Query>\n      </Fragment>\n    );\n  }\n}\n\nexport default Launches;\n","import React, { Component, Fragment } from \"react\";\nimport gql from \"graphql-tag\";\nimport { Query } from \"react-apollo\";\nimport { Link } from \"react-router-dom\";\nimport classNames from \"classnames\";\n\nconst LAUNCH_QUERY = gql`\n  query LaunchQuery($flight_number: Int!) {\n    launch(flight_number: $flight_number) {\n      flight_number\n      mission_name\n      launch_year\n      launch_success\n      launch_date_local\n      rocket {\n        rocket_id\n        rocket_name\n        rocket_type\n      }\n    }\n  }\n`;\n\nconst renderLaunch = ({ loading, error, data }) => {\n  if (loading) {\n    return <h4>Loading...</h4>;\n  } else if (error) {\n    console.error(error);\n    return <h4 style={{ color: \"red\" }}>An error occurred.</h4>;\n  } else {\n    const {\n      flight_number,\n      mission_name,\n      launch_year,\n      launch_success,\n      launch_date_local,\n      rocket: { rocket_id, rocket_name, rocket_type }\n    } = data.launch;\n    return (\n      <Fragment>\n        <h1 className=\"display-4 my-3\">\n          <span className=\"text-dark\">Mission: {mission_name}</span>\n        </h1>\n        <h4 className=\"mb-3\">Launch Details</h4>\n        <ul className=\"list-group text-left\">\n          <li className=\"list-group-item\">Flight Number: {flight_number}</li>\n          <li className=\"list-group-item\">Launch Year: {launch_year}</li>\n          <li className=\"list-group-item\">\n            Launch Successful:{\" \"}\n            <span\n              className={classNames({\n                \"text-success\": launch_success,\n                \"text-danger\": !launch_success\n              })}\n            >\n              {launch_success ? \"Yes\" : \"No\"}\n            </span>\n          </li>\n        </ul>\n\n        <h4 className=\"my-3\">Rocket Details</h4>\n        <ul className=\"list-group text-left\">\n              <li className=\"list-group-item\">Rocket ID: {rocket_id}</li>\n              <li className=\"list-group-item\">Rocket Name: {rocket_name}</li>\n              <li className=\"list-group-item\">Rocket Type: {rocket_type}</li>\n\n        </ul>\n\n        <hr />\n\n        <Link to=\"/\" className=\"btn btn-secondary\">Back</Link>\n      </Fragment>\n    );\n  }\n};\n\nexport class Launch extends Component {\n  render() {\n    let { flight_number } = this.props.match.params;\n    flight_number = parseInt(flight_number);\n    return (\n      <Fragment>\n        <Query query={LAUNCH_QUERY} variables={{ flight_number }}>\n          {renderLaunch}\n        </Query>\n      </Fragment>\n    );\n  }\n}\n\nexport default Launch;\n","import React from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Launches from './components/Launches';\nimport Launch from './components/Launch'\nimport './App.css';\nimport logo from './spacex.png';\n\nconst client = new ApolloClient({\n  uri: '/graphql'\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"App container\">\n        <img\n          src={logo} alt=\"SpaceX\"\n          style={{width: \"200px\", margin: \"30px 0\" }}\n        />\n        <Route exact path=\"/\" component={Launches} />\n        <Route exact path=\"/launch/:flight_number\" component={Launch} />\n      </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}